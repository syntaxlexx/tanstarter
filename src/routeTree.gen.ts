/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as publicIndexImport } from './routes/(public)/index'
import { Route as publicSigninImport } from './routes/(public)/signin'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminUsersCreateImport } from './routes/admin/users/create'
import { Route as AdminUsersUserIdImport } from './routes/admin/users/$userId'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const publicIndexRoute = publicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicSigninRoute = publicSigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => publicRouteRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminUsersCreateRoute = AdminUsersCreateImport.update({
  id: '/users/create',
  path: '/users/create',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminUsersUserIdRoute = AdminUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)/signin': {
      id: '/(public)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof publicSigninImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/users/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users/create': {
      id: '/admin/users/create'
      path: '/users/create'
      fullPath: '/admin/users/create'
      preLoaderRoute: typeof AdminUsersCreateImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface publicRouteRouteChildren {
  publicSigninRoute: typeof publicSigninRoute
  publicIndexRoute: typeof publicIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicSigninRoute: publicSigninRoute,
  publicIndexRoute: publicIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
  AdminUsersCreateRoute: typeof AdminUsersCreateRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
  AdminUsersCreateRoute: AdminUsersCreateRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/signin': typeof publicSigninRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/create': typeof AdminUsersCreateRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesByTo {
  '/signin': typeof publicSigninRoute
  '/': typeof publicIndexRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/create': typeof AdminUsersCreateRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(public)': typeof publicRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(public)/signin': typeof publicSigninRoute
  '/(public)/': typeof publicIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/create': typeof AdminUsersCreateRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/signin'
    | '/admin/'
    | '/dashboard/'
    | '/admin/users/$userId'
    | '/admin/users/create'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/admin/users/$userId'
    | '/admin/users/create'
    | '/admin/users'
  id:
    | '__root__'
    | '/(public)'
    | '/admin'
    | '/dashboard'
    | '/(public)/signin'
    | '/(public)/'
    | '/admin/'
    | '/dashboard/'
    | '/admin/users/$userId'
    | '/admin/users/create'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  publicRouteRoute: typeof publicRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  publicRouteRoute: publicRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(public)",
        "/admin",
        "/dashboard"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/signin",
        "/(public)/"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/",
        "/admin/users/$userId",
        "/admin/users/create",
        "/admin/users/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/"
      ]
    },
    "/(public)/signin": {
      "filePath": "(public)/signin.tsx",
      "parent": "/(public)"
    },
    "/(public)/": {
      "filePath": "(public)/index.tsx",
      "parent": "/(public)"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/admin/users/$userId": {
      "filePath": "admin/users/$userId.tsx",
      "parent": "/admin"
    },
    "/admin/users/create": {
      "filePath": "admin/users/create.tsx",
      "parent": "/admin"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
